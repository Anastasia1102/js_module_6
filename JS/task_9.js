// Задача 1 (легка)

// Створіть клас Product, який використовує патерн “об’єкт параметрів” у своєму конструкторі.
// Конструктор приймає один об’єкт із такими властивостями:
//  • name (назва продукту),
//  • price (ціна продукту),
//  • category (категорія продукту).

// Клас повинен мати метод getDetails, який повертає рядок у форматі:
// "Product: [name], Price: $[price], Category: [category]".
//  створіть екземпляр класу та викличте метод getDetails.

// class Product {
//   // Ваш код тут
// }

// Задача 2 (середня)

// Створіть клас User, який використовує патерн “об’єкт параметрів” у своєму конструкторі.
// Конструктор приймає один об’єкт із такими властивостями:
//  • username (ім’я користувача),
//  • email (електронна пошта),
//  • age (вік користувача, за замовчуванням 18).

// Клас повинен мати метод getInfo, який повертає рядок у форматі:
// "User: [username], Email: [email], Age: [age]".
// створіть екземпляр класу з об’єктом, який містить значення для всіх властивостей, і викличте метод getInfo.

// class User {
//   // Ваш код тут
// }

// Задача 3 (середня)

// Створіть клас Order, який використовує патерн “об’єкт параметрів” у своєму конструкторі.
// Конструктор приймає один об’єкт із такими властивостями:
//  • orderId (ідентифікатор замовлення),
//  • products (масив назв продуктів),
//  • totalAmount (загальна сума).

// Клас повинен мати метод getSummary, який повертає рядок у форматі:
// "Order #[orderId]: [products.join(", ")] - Total: $[totalAmount]".
//  створіть екземпляр класу та викличте метод getSummary.

// class Order {
//   // Ваш код тут
// }

// Задача 4 (складна)

// Створіть клас Employee, який використовує патерн “об’єкт параметрів” у своєму конструкторі.
// Конструктор приймає один об’єкт із такими властивостями:
//  • name (ім’я працівника),
//  • position (посада працівника),
//  • salary (зарплата працівника),
//  • isActive (чи активний працівник, за замовчуванням true).

// Клас повинен мати:
//  1. Метод getDetails, який повертає рядок:
// "Employee [name] works as a [position] and earns $[salary].".
//  2. Метод deactivate, який встановлює властивість isActive у значення false.
// створіть екземпляр класу, викличте метод getDetails, потім деактивуйте працівника і перевірте значення isActive.

// class Employee {
//   // Ваш код тут
// }

// Задача 5 (складна)

// Створіть клас Movie, який використовує патерн “об’єкт параметрів” у своєму конструкторі.
// Конструктор приймає один об’єкт із такими властивостями:
//  • title (назва фільму),
//  • director (режисер),
//  • year (рік випуску),
//  • genres (масив жанрів).

// Клас повинен мати:
//  1. Метод getDescription, який повертає рядок:
// "Movie: [title] (Directed by [director], [year]).".
//  2. Метод getGenres, який повертає жанри у форматі:
// "Genres: [genres.join(", ")]".
// створіть екземпляр класу, викличте обидва методи.

// class Movie {
//   // Ваш код тут
// }

// Ці задачі допоможуть зрозуміти, як використовувати патерн “об’єкт параметрів” для передачі даних у класи, створювати гнучкі й читабельні конструктори, а також реалізовувати методи класу.
